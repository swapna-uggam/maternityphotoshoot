import nodemailer from 'nodemailer';

export async function POST(req) {
  try {
    const {
      name,
      email,
      phone,
      duedate,
      location,
      message
    } = await req.json();

    // Setup transporter
    const transporter = nodemailer.createTransport({
      service: 'gmail', // You can use another provider (like SMTP)
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    // ‚úÖ Email to Client (Confirmation)
    const clientMailOptions = {
      from: `"SnapU Studio" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: '‚úÖ We Received Your Message - SnapU Studio',
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <h2 style="color:#e91e63;">Hi ${name},</h2>
          <p>Thank you for contacting <strong>SnapU Studio</strong>! We've successfully received your form submission. We'll be in touch very soon.</p>
          
          <hr style="margin: 20px 0;" />

          <p style="margin-top: 20px;">Warm regards,<br />SnapU Team üì∏</p>
        </div>
      `
    };

    // ‚úÖ Email to Admin (Notification)
    const adminMailOptions = {
      from: `"SnapU Studio" <${process.env.EMAIL_USER}>`,
      to: process.env.ADMIN_EMAIL, // From .env.local
      subject: 'üì© New Contact Form Submission Received',
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <h2 style="color:#333;">New Form Submission Received</h2>
          <p>You‚Äôve received a new contact form submission on your website.</p>
          
          <hr style="margin: 20px 0;" />

          <h3>Submitted Details:</h3>
          <ul>
            <li><strong>Name:</strong> ${name}</li>
            <li><strong>Email:</strong> ${email}</li>
            <li><strong>Phone:</strong> ${phone}</li>
            <li><strong>Due Date:</strong> ${duedate}</li>
            <li><strong>Location:</strong> ${location}</li>
            <li><strong>Message:</strong> ${message}</li>
          </ul>

          <p style="margin-top: 20px;"><i>This message was auto-generated by your portfolio site.</i></p>
        </div>
      `
    };

    // Send both emails
    await transporter.sendMail(clientMailOptions);
    await transporter.sendMail(adminMailOptions);

    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (error) {
    console.error('‚ùå Email error:', error);
    return new Response(JSON.stringify({ success: false, error: error.message }), { status: 500 });
  }
}
